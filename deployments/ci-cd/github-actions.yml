# GitHub Actions CI/CD Pipeline
# Automated deployment pipeline with proper testing and security checks

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: content-repurpose

jobs:
  # Code Quality and Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r deployments/requirements-development.txt
        
    - name: Run code formatting check
      run: |
        cd backend
        black --check --diff .
        
    - name: Run import sorting check
      run: |
        cd backend
        isort --check-only --diff .
        
    - name: Run linting
      run: |
        cd backend
        flake8 .
        
    - name: Run type checking
      run: |
        cd backend
        mypy .
        
    - name: Run security audit
      run: |
        cd backend
        bandit -r . -x tests/
        safety check
        
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: content_repurpose_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r deployments/requirements-development.txt
        
    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/content_repurpose_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd backend
        alembic upgrade head
        
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/content_repurpose_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key_for_ci_testing_purposes_only
        REFRESH_SECRET_KEY: test_refresh_secret_key_for_ci_testing_purposes
        ENVIRONMENT: testing
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        fail_ci_if_error: true
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/content_repurpose_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key_for_ci_testing_purposes_only
        REFRESH_SECRET_KEY: test_refresh_secret_key_for_ci_testing_purposes
        ENVIRONMENT: testing
      run: |
        python testing/run_tests.py --quick-validate
        python testing/run_tests.py --phase 8

  # Docker Build and Security Scan
  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployments/Dockerfile.production
        push: false
        tags: ${{ env.REGISTRY }}/${{ github.repository }}:test
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:test
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-checks, test, docker-build]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    
    environment:
      name: staging
      url: https://staging.content-repurpose.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployments/Dockerfile.production
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository }}:staging
          ${{ env.REGISTRY }}/${{ github.repository }}:staging-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to staging
      run: |
        # This would be replaced with actual deployment logic
        # e.g., kubectl apply, docker-compose up, etc.
        echo "Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ github.repository }}:staging-${{ github.sha }}"
        
    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Run basic health check
        curl -f https://staging.content-repurpose.com/api/health || exit 1
        
        # Run additional smoke tests
        python testing/run_tests.py --quick-validate --environment staging
        
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-checks, test, docker-build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    environment:
      name: production
      url: https://content-repurpose.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployments/Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Deploy to production
      run: |
        # This would be replaced with actual deployment logic
        # e.g., kubectl apply with rolling update, blue-green deployment, etc.
        echo "Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.sha }}"
        
    - name: Run production health checks
      run: |
        # Wait for deployment to be ready
        sleep 60
        
        # Run comprehensive health check
        curl -f https://content-repurpose.com/api/health/comprehensive || exit 1
        
        # Run production smoke tests
        python testing/run_tests.py --quick-validate --environment production
        
    - name: Update deployment tracking
      run: |
        # Record deployment in monitoring system
        curl -X POST "${{ secrets.DEPLOYMENT_WEBHOOK }}" \
          -H "Content-Type: application/json" \
          -d '{
            "environment": "production",
            "version": "${{ github.sha }}",
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
            "deployer": "${{ github.actor }}"
          }'
          
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Security Monitoring
  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: deploy-production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'https://content-repurpose.com'
        
    - name: Upload ZAP scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'results.sarif'