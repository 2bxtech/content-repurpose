# Multi-stage Production Dockerfile
# Stage 1: Build dependencies and optimize Python packages
FROM python:3.12-slim as builder

# Set build arguments for optimization
ARG BUILD_ENV=production
ARG ENABLE_OPTIMIZATIONS=true

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment for better dependency isolation
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install dependencies with optimization
COPY backend/requirements.txt /tmp/requirements.txt
COPY deployments/requirements-production.txt /tmp/requirements-production.txt

# Install Python dependencies with optimizations
RUN pip install --no-cache-dir --upgrade pip wheel setuptools && \
    pip install --no-cache-dir -r /tmp/requirements-production.txt && \
    pip install --no-cache-dir -r /tmp/requirements.txt

# Pre-compile Python bytecode for faster startup
COPY backend/ /tmp/app/
RUN python -m compileall /tmp/app/

# Stage 2: Production runtime
FROM python:3.12-slim as production

# Set production labels for container management
LABEL maintainer="Content Repurpose Team"
LABEL version="2.0.0"
LABEL environment="production"
LABEL app="content-repurpose-api"

# Set production environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    ENVIRONMENT=production \
    PORT=8000

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    dumb-init \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create application directory
WORKDIR /app

# Create non-root user with specific UID/GID for security
RUN groupadd -r -g 1001 appuser && \
    useradd -r -g appuser -u 1001 -d /app -s /bin/false appuser

# Copy application code and set permissions
COPY --from=builder /tmp/app/ /app/
RUN chown -R appuser:appuser /app && \
    chmod -R 755 /app

# Create directories for logs and uploads with proper permissions
RUN mkdir -p /app/logs /app/uploads /app/tmp && \
    chown -R appuser:appuser /app/logs /app/uploads /app/tmp && \
    chmod 750 /app/logs /app/uploads /app/tmp

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Production health check with timeout optimization
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/api/health/comprehensive || exit 1

# Use dumb-init for proper signal handling in containers
ENTRYPOINT ["dumb-init", "--"]

# Production command with optimizations
CMD ["uvicorn", "main:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "4", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--access-log", \
     "--log-level", "info", \
     "--timeout-keep-alive", "30", \
     "--timeout-graceful-shutdown", "30"]